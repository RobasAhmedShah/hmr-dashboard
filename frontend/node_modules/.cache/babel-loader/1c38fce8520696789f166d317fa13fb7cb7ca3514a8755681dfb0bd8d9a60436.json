{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mughal_Here\\\\Desktop\\\\HMR Project\\\\frontend\\\\src\\\\components\\\\organization\\\\OrganizationAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { organizationsAPI, orgAdminAPI } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrganizationAuthContext = /*#__PURE__*/createContext(null);\n\n// Quick login credentials (for convenience - actual auth goes through backend)\nconst ORGANIZATION_CREDENTIALS = {\n  'hmr': {\n    email: 'admin@hmr.com',\n    password: 'hmr123',\n    displayName: 'HMR Company'\n  },\n  'saima': {\n    email: 'admin@saima.com',\n    password: 'saima123',\n    displayName: 'Saima Company'\n  }\n};\nexport const OrganizationAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [organizationUser, setOrganizationUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const orgSession = localStorage.getItem('orgSession');\n    const orgUserData = localStorage.getItem('orgUser');\n    if (orgSession === 'true' && orgUserData) {\n      try {\n        const userData = JSON.parse(orgUserData);\n        setOrganizationUser(userData);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error parsing organization user data:', error);\n        localStorage.removeItem('orgSession');\n        localStorage.removeItem('orgUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Find matching organization credentials\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(([key, org]) => org.email === email && org.password === password);\n    if (!orgEntry) {\n      throw new Error('Invalid credentials');\n    }\n    const [orgKey, orgData] = orgEntry;\n    try {\n      var _response$data, _response$data$data, _response$data2, _matchedOrg, _matchedOrg2, _matchedOrg3, _matchedOrg4, _matchedOrg5, _matchedOrg6, _matchedOrg7;\n      // Fetch all organizations from backend\n      const response = await organizationsAPI.getAll();\n      const organizations = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$data = _response$data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.organizations) || ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.organizations) || response.data || [];\n      console.log('📋 Fetched organizations from backend:', organizations);\n      console.log('🔍 Looking for organization:', {\n        displayName: orgData.organizationName,\n        backendOrgId: orgData.backendOrgId,\n        backendOrgName: orgData.backendOrgName\n      });\n\n      // PRIORITY MATCHING: Try explicit ID first, then name matching\n      let matchedOrg = null;\n\n      // STEP 1: Try exact ID match first (MOST RELIABLE) ⭐\n      if (orgData.backendOrgId) {\n        matchedOrg = organizations.find(org => {\n          const orgId = (org.id || org._id || org.organizationId || org.displayCode || '').toUpperCase().trim();\n          const targetId = orgData.backendOrgId.toUpperCase().trim();\n          console.log('🔍 ID Check:', {\n            orgId,\n            targetId,\n            matches: orgId === targetId\n          });\n          return orgId === targetId;\n        });\n        if (matchedOrg) {\n          console.log('✅ MATCHED by EXPLICIT ID:', orgData.backendOrgId, matchedOrg);\n        }\n      }\n\n      // STEP 2: Fallback to name matching (if no explicit ID or ID not found)\n      if (!matchedOrg) {\n        console.log('⚠️ No ID match, trying name matching...');\n        matchedOrg = organizations.find(org => {\n          const orgName = (org.name || '').toLowerCase().trim();\n          const orgSlug = (org.slug || '').toLowerCase().trim();\n          const searchName = (orgData.backendOrgName || orgData.organizationName).toLowerCase().trim();\n          const searchSlug = orgData.organizationSlug.toLowerCase().trim();\n          console.log('🔍 Name Check:', {\n            backendOrg: {\n              name: orgName,\n              slug: orgSlug\n            },\n            searching: {\n              name: searchName,\n              slug: searchSlug\n            }\n          });\n\n          // Match by exact name or slug first\n          if (orgName === searchName || orgSlug === searchSlug) {\n            return true;\n          }\n\n          // Fallback to contains matching\n          return orgName.includes(searchName) || searchName.includes(orgName);\n        });\n        if (matchedOrg) {\n          console.log('✅ MATCHED by NAME:', matchedOrg);\n        }\n      }\n      if (!matchedOrg) {\n        console.warn('⚠️ Organization not found in backend!');\n        console.warn('Available organizations:', organizations.map(o => ({\n          name: o.name,\n          slug: o.slug,\n          id: o.id || o._id\n        })));\n      }\n\n      // Use the actual ID from backend (like ORG-000014, ORG-000001)\n      const organizationId = ((_matchedOrg = matchedOrg) === null || _matchedOrg === void 0 ? void 0 : _matchedOrg.id) || ((_matchedOrg2 = matchedOrg) === null || _matchedOrg2 === void 0 ? void 0 : _matchedOrg2._id) || ((_matchedOrg3 = matchedOrg) === null || _matchedOrg3 === void 0 ? void 0 : _matchedOrg3.organizationId) || `${orgData.organizationSlug}-company`;\n\n      // Use display name override if specified, otherwise use backend name\n      const displayName = orgData.displayNameOverride ? orgData.organizationName : ((_matchedOrg4 = matchedOrg) === null || _matchedOrg4 === void 0 ? void 0 : _matchedOrg4.name) || orgData.organizationName;\n      const userData = {\n        email: orgData.email,\n        organizationName: displayName,\n        // Use display name (overridden or from backend)\n        backendOrganizationName: (_matchedOrg5 = matchedOrg) === null || _matchedOrg5 === void 0 ? void 0 : _matchedOrg5.name,\n        // Store backend name separately\n        organizationId: organizationId,\n        // This will be ORG-000014 or ORG-000001\n        organizationSlug: ((_matchedOrg6 = matchedOrg) === null || _matchedOrg6 === void 0 ? void 0 : _matchedOrg6.slug) || orgData.organizationSlug,\n        role: 'organization_admin',\n        loginTime: new Date().toISOString(),\n        organizationData: matchedOrg // Store full org data\n      };\n      console.log('✅ Organization login successful!');\n      console.log('📌 Organization ID:', organizationId);\n      console.log('📌 Display Name:', displayName);\n      console.log('📌 Backend Name:', (_matchedOrg7 = matchedOrg) === null || _matchedOrg7 === void 0 ? void 0 : _matchedOrg7.name);\n      console.log('📌 Full user data:', userData);\n      setOrganizationUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('orgSession', 'true');\n      localStorage.setItem('orgUser', JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      console.error('❌ Failed to fetch organizations:', error);\n\n      // Fallback: use default IDs if backend fails\n      const fallbackOrgId = `${orgData.organizationSlug}-company`;\n      const userData = {\n        email: orgData.email,\n        organizationName: orgData.organizationName,\n        organizationId: fallbackOrgId,\n        organizationSlug: orgData.organizationSlug,\n        role: 'organization_admin',\n        loginTime: new Date().toISOString()\n      };\n      console.warn('⚠️ Using fallback organization ID:', fallbackOrgId);\n      setOrganizationUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('orgSession', 'true');\n      localStorage.setItem('orgUser', JSON.stringify(userData));\n      return userData;\n    }\n  };\n  const logout = () => {\n    setOrganizationUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('orgSession');\n    localStorage.removeItem('orgUser');\n  };\n  return /*#__PURE__*/_jsxDEV(OrganizationAuthContext.Provider, {\n    value: {\n      organizationUser,\n      isAuthenticated,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 5\n  }, this);\n};\n_s(OrganizationAuthProvider, \"cYnEyG5A+PMlHURF8s7BiT1cLn8=\");\n_c = OrganizationAuthProvider;\nexport const useOrganizationAuth = () => {\n  _s2();\n  const context = useContext(OrganizationAuthContext);\n  if (!context) {\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\n  }\n  return context;\n};\n_s2(useOrganizationAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"OrganizationAuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","organizationsAPI","orgAdminAPI","jsxDEV","_jsxDEV","OrganizationAuthContext","ORGANIZATION_CREDENTIALS","email","password","displayName","OrganizationAuthProvider","children","_s","organizationUser","setOrganizationUser","isAuthenticated","setIsAuthenticated","loading","setLoading","orgSession","localStorage","getItem","orgUserData","userData","JSON","parse","error","console","removeItem","login","orgEntry","Object","entries","find","key","org","Error","orgKey","orgData","_response$data","_response$data$data","_response$data2","_matchedOrg","_matchedOrg2","_matchedOrg3","_matchedOrg4","_matchedOrg5","_matchedOrg6","_matchedOrg7","response","getAll","organizations","data","log","organizationName","backendOrgId","backendOrgName","matchedOrg","orgId","id","_id","organizationId","displayCode","toUpperCase","trim","targetId","matches","orgName","name","toLowerCase","orgSlug","slug","searchName","searchSlug","organizationSlug","backendOrg","searching","includes","warn","map","o","displayNameOverride","backendOrganizationName","role","loginTime","Date","toISOString","organizationData","setItem","stringify","fallbackOrgId","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOrganizationAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Mughal_Here/Desktop/HMR Project/frontend/src/components/organization/OrganizationAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { organizationsAPI, orgAdminAPI } from '../../services/api';\r\n\r\nconst OrganizationAuthContext = createContext(null);\r\n\r\n// Quick login credentials (for convenience - actual auth goes through backend)\r\nconst ORGANIZATION_CREDENTIALS = {\r\n  'hmr': {\r\n    email: 'admin@hmr.com',\r\n    password: 'hmr123',\r\n    displayName: 'HMR Company',\r\n  },\r\n  'saima': {\r\n    email: 'admin@saima.com',\r\n    password: 'saima123',\r\n    displayName: 'Saima Company',\r\n  }\r\n};\r\n\r\nexport const OrganizationAuthProvider = ({ children }) => {\r\n  const [organizationUser, setOrganizationUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const orgSession = localStorage.getItem('orgSession');\r\n    const orgUserData = localStorage.getItem('orgUser');\r\n    \r\n    if (orgSession === 'true' && orgUserData) {\r\n      try {\r\n        const userData = JSON.parse(orgUserData);\r\n        setOrganizationUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing organization user data:', error);\r\n        localStorage.removeItem('orgSession');\r\n        localStorage.removeItem('orgUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    // Find matching organization credentials\r\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(\r\n      ([key, org]) => org.email === email && org.password === password\r\n    );\r\n\r\n    if (!orgEntry) {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n\r\n    const [orgKey, orgData] = orgEntry;\r\n\r\n    try {\r\n      // Fetch all organizations from backend\r\n      const response = await organizationsAPI.getAll();\r\n      const organizations = response.data?.data?.organizations || response.data?.organizations || response.data || [];\r\n      \r\n      console.log('📋 Fetched organizations from backend:', organizations);\r\n      console.log('🔍 Looking for organization:', {\r\n        displayName: orgData.organizationName,\r\n        backendOrgId: orgData.backendOrgId,\r\n        backendOrgName: orgData.backendOrgName\r\n      });\r\n\r\n      // PRIORITY MATCHING: Try explicit ID first, then name matching\r\n      let matchedOrg = null;\r\n      \r\n      // STEP 1: Try exact ID match first (MOST RELIABLE) ⭐\r\n      if (orgData.backendOrgId) {\r\n        matchedOrg = organizations.find(org => {\r\n          const orgId = (org.id || org._id || org.organizationId || org.displayCode || '').toUpperCase().trim();\r\n          const targetId = orgData.backendOrgId.toUpperCase().trim();\r\n          console.log('🔍 ID Check:', { orgId, targetId, matches: orgId === targetId });\r\n          return orgId === targetId;\r\n        });\r\n        \r\n        if (matchedOrg) {\r\n          console.log('✅ MATCHED by EXPLICIT ID:', orgData.backendOrgId, matchedOrg);\r\n        }\r\n      }\r\n      \r\n      // STEP 2: Fallback to name matching (if no explicit ID or ID not found)\r\n      if (!matchedOrg) {\r\n        console.log('⚠️ No ID match, trying name matching...');\r\n        matchedOrg = organizations.find(org => {\r\n          const orgName = (org.name || '').toLowerCase().trim();\r\n          const orgSlug = (org.slug || '').toLowerCase().trim();\r\n          const searchName = (orgData.backendOrgName || orgData.organizationName).toLowerCase().trim();\r\n          const searchSlug = orgData.organizationSlug.toLowerCase().trim();\r\n          \r\n          console.log('🔍 Name Check:', {\r\n            backendOrg: { name: orgName, slug: orgSlug },\r\n            searching: { name: searchName, slug: searchSlug }\r\n          });\r\n          \r\n          // Match by exact name or slug first\r\n          if (orgName === searchName || orgSlug === searchSlug) {\r\n            return true;\r\n          }\r\n          \r\n          // Fallback to contains matching\r\n          return orgName.includes(searchName) || searchName.includes(orgName);\r\n        });\r\n        \r\n        if (matchedOrg) {\r\n          console.log('✅ MATCHED by NAME:', matchedOrg);\r\n        }\r\n      }\r\n\r\n      if (!matchedOrg) {\r\n        console.warn('⚠️ Organization not found in backend!');\r\n        console.warn('Available organizations:', organizations.map(o => ({ \r\n          name: o.name, \r\n          slug: o.slug, \r\n          id: o.id || o._id \r\n        })));\r\n      }\r\n\r\n      // Use the actual ID from backend (like ORG-000014, ORG-000001)\r\n      const organizationId = matchedOrg?.id || matchedOrg?._id || matchedOrg?.organizationId || `${orgData.organizationSlug}-company`;\r\n\r\n      // Use display name override if specified, otherwise use backend name\r\n      const displayName = orgData.displayNameOverride \r\n        ? orgData.organizationName \r\n        : (matchedOrg?.name || orgData.organizationName);\r\n\r\n      const userData = {\r\n        email: orgData.email,\r\n        organizationName: displayName, // Use display name (overridden or from backend)\r\n        backendOrganizationName: matchedOrg?.name, // Store backend name separately\r\n        organizationId: organizationId, // This will be ORG-000014 or ORG-000001\r\n        organizationSlug: matchedOrg?.slug || orgData.organizationSlug,\r\n        role: 'organization_admin',\r\n        loginTime: new Date().toISOString(),\r\n        organizationData: matchedOrg // Store full org data\r\n      };\r\n\r\n      console.log('✅ Organization login successful!');\r\n      console.log('📌 Organization ID:', organizationId);\r\n      console.log('📌 Display Name:', displayName);\r\n      console.log('📌 Backend Name:', matchedOrg?.name);\r\n      console.log('📌 Full user data:', userData);\r\n\r\n      setOrganizationUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('orgSession', 'true');\r\n      localStorage.setItem('orgUser', JSON.stringify(userData));\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch organizations:', error);\r\n      \r\n      // Fallback: use default IDs if backend fails\r\n      const fallbackOrgId = `${orgData.organizationSlug}-company`;\r\n      const userData = {\r\n        email: orgData.email,\r\n        organizationName: orgData.organizationName,\r\n        organizationId: fallbackOrgId,\r\n        organizationSlug: orgData.organizationSlug,\r\n        role: 'organization_admin',\r\n        loginTime: new Date().toISOString()\r\n      };\r\n\r\n      console.warn('⚠️ Using fallback organization ID:', fallbackOrgId);\r\n\r\n      setOrganizationUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('orgSession', 'true');\r\n      localStorage.setItem('orgUser', JSON.stringify(userData));\r\n\r\n      return userData;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setOrganizationUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('orgSession');\r\n    localStorage.removeItem('orgUser');\r\n  };\r\n\r\n  return (\r\n    <OrganizationAuthContext.Provider \r\n      value={{ \r\n        organizationUser, \r\n        isAuthenticated, \r\n        loading, \r\n        login, \r\n        logout \r\n      }}\r\n    >\r\n      {children}\r\n    </OrganizationAuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useOrganizationAuth = () => {\r\n  const context = useContext(OrganizationAuthContext);\r\n  if (!context) {\r\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}