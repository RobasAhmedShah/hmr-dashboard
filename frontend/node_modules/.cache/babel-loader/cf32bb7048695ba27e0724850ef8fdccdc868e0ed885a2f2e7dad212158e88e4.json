{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mughal_Here\\\\Desktop\\\\HMR Project\\\\frontend\\\\src\\\\components\\\\organization\\\\OrganizationAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrganizationAuthContext = /*#__PURE__*/createContext(null);\n\n// Organization credentials\nconst ORGANIZATION_CREDENTIALS = {\n  'hmr': {\n    email: 'admin@hmr.com',\n    password: 'hmr123',\n    organizationName: 'HMR Company',\n    organizationId: 'hmr-company',\n    organizationSlug: 'hmr'\n  },\n  'saima': {\n    email: 'admin@saima.com',\n    password: 'saima123',\n    organizationName: 'Saima Company',\n    organizationId: 'saima-company',\n    organizationSlug: 'saima'\n  }\n};\nexport const OrganizationAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [organizationUser, setOrganizationUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const orgSession = localStorage.getItem('orgSession');\n    const orgUserData = localStorage.getItem('orgUser');\n    if (orgSession === 'true' && orgUserData) {\n      try {\n        const userData = JSON.parse(orgUserData);\n        setOrganizationUser(userData);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error parsing organization user data:', error);\n        localStorage.removeItem('orgSession');\n        localStorage.removeItem('orgUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Find matching organization\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(([key, org]) => org.email === email && org.password === password);\n    if (!orgEntry) {\n      throw new Error('Invalid credentials');\n    }\n    const [orgKey, orgData] = orgEntry;\n    const userData = {\n      email: orgData.email,\n      organizationName: orgData.organizationName,\n      organizationId: orgData.organizationId,\n      organizationSlug: orgData.organizationSlug,\n      role: 'organization_admin',\n      loginTime: new Date().toISOString()\n    };\n    setOrganizationUser(userData);\n    setIsAuthenticated(true);\n    localStorage.setItem('orgSession', 'true');\n    localStorage.setItem('orgUser', JSON.stringify(userData));\n    return userData;\n  };\n  const logout = () => {\n    setOrganizationUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('orgSession');\n    localStorage.removeItem('orgUser');\n  };\n  return /*#__PURE__*/_jsxDEV(OrganizationAuthContext.Provider, {\n    value: {\n      organizationUser,\n      isAuthenticated,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(OrganizationAuthProvider, \"cYnEyG5A+PMlHURF8s7BiT1cLn8=\");\n_c = OrganizationAuthProvider;\nexport const useOrganizationAuth = () => {\n  _s2();\n  const context = useContext(OrganizationAuthContext);\n  if (!context) {\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\n  }\n  return context;\n};\n_s2(useOrganizationAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"OrganizationAuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","OrganizationAuthContext","ORGANIZATION_CREDENTIALS","email","password","organizationName","organizationId","organizationSlug","OrganizationAuthProvider","children","_s","organizationUser","setOrganizationUser","isAuthenticated","setIsAuthenticated","loading","setLoading","orgSession","localStorage","getItem","orgUserData","userData","JSON","parse","error","console","removeItem","login","orgEntry","Object","entries","find","key","org","Error","orgKey","orgData","role","loginTime","Date","toISOString","setItem","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOrganizationAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Mughal_Here/Desktop/HMR Project/frontend/src/components/organization/OrganizationAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst OrganizationAuthContext = createContext(null);\r\n\r\n// Organization credentials\r\nconst ORGANIZATION_CREDENTIALS = {\r\n  'hmr': {\r\n    email: 'admin@hmr.com',\r\n    password: 'hmr123',\r\n    organizationName: 'HMR Company',\r\n    organizationId: 'hmr-company',\r\n    organizationSlug: 'hmr'\r\n  },\r\n  'saima': {\r\n    email: 'admin@saima.com',\r\n    password: 'saima123',\r\n    organizationName: 'Saima Company',\r\n    organizationId: 'saima-company',\r\n    organizationSlug: 'saima'\r\n  }\r\n};\r\n\r\nexport const OrganizationAuthProvider = ({ children }) => {\r\n  const [organizationUser, setOrganizationUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const orgSession = localStorage.getItem('orgSession');\r\n    const orgUserData = localStorage.getItem('orgUser');\r\n    \r\n    if (orgSession === 'true' && orgUserData) {\r\n      try {\r\n        const userData = JSON.parse(orgUserData);\r\n        setOrganizationUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing organization user data:', error);\r\n        localStorage.removeItem('orgSession');\r\n        localStorage.removeItem('orgUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    // Find matching organization\r\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(\r\n      ([key, org]) => org.email === email && org.password === password\r\n    );\r\n\r\n    if (!orgEntry) {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n\r\n    const [orgKey, orgData] = orgEntry;\r\n    const userData = {\r\n      email: orgData.email,\r\n      organizationName: orgData.organizationName,\r\n      organizationId: orgData.organizationId,\r\n      organizationSlug: orgData.organizationSlug,\r\n      role: 'organization_admin',\r\n      loginTime: new Date().toISOString()\r\n    };\r\n\r\n    setOrganizationUser(userData);\r\n    setIsAuthenticated(true);\r\n    localStorage.setItem('orgSession', 'true');\r\n    localStorage.setItem('orgUser', JSON.stringify(userData));\r\n\r\n    return userData;\r\n  };\r\n\r\n  const logout = () => {\r\n    setOrganizationUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('orgSession');\r\n    localStorage.removeItem('orgUser');\r\n  };\r\n\r\n  return (\r\n    <OrganizationAuthContext.Provider \r\n      value={{ \r\n        organizationUser, \r\n        isAuthenticated, \r\n        loading, \r\n        login, \r\n        logout \r\n      }}\r\n    >\r\n      {children}\r\n    </OrganizationAuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useOrganizationAuth = () => {\r\n  const context = useContext(OrganizationAuthContext);\r\n  if (!context) {\r\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}