{"ast":null,"code":"/**\r\n * Format location data for display\r\n * Handles both string and object formats\r\n * @param {string|object} location - Location data\r\n * @returns {string} Formatted location string\r\n */\nexport const formatLocation = location => {\n  if (!location) return 'Location not specified';\n  if (typeof location === 'string') {\n    return location;\n  }\n  if (typeof location === 'object') {\n    const city = location.city || '';\n    const address = location.address || '';\n    return `${city}, ${address}`.replace(/^,\\s*|,\\s*$/g, '').trim() || 'Location not specified';\n  }\n  return 'Location not specified';\n};\n\n// Format prices\nexport const formatPrice = price => {\n  // If already formatted (contains $), return as is\n  if (typeof price === 'string' && price.includes('$')) {\n    return price;\n  }\n\n  // If it's a string but not formatted, try to parse it\n  if (typeof price === 'string') {\n    const num = parseFloat(price);\n    if (isNaN(num)) {\n      return 'N/A';\n    }\n    return formatNumericPrice(num);\n  }\n\n  // If it's a number, format it\n  if (typeof price === 'number') {\n    return formatNumericPrice(price);\n  }\n  return 'N/A';\n};\n\n// Helper function to format numeric prices\nconst formatNumericPrice = num => {\n  if (isNaN(num)) return 'N/A';\n  if (num >= 1000000000) {\n    return `$${(num / 1000000000).toFixed(1)}B`;\n  } else if (num >= 1000000) {\n    return `$${(num / 1000000).toFixed(1)}M`;\n  } else if (num >= 1000) {\n    return `$${(num / 1000).toFixed(0)}K`;\n  }\n  return `$${num.toFixed(0)}`;\n};\n\n/**\r\n * Format currency for display\r\n * Handles both string and number formats\r\n * @param {string|number} amount - Amount to format\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatCurrency = amount => {\n  if (typeof amount === 'string') {\n    return amount; // Already formatted by backend\n  }\n  if (typeof amount === 'number') {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0\n    }).format(amount);\n  }\n  return '$0';\n};\n\n/**\r\n * Format percentage for display\r\n * Handles both string and number formats\r\n * @param {string|number} percentage - Percentage to format\r\n * @returns {string} Formatted percentage string\r\n */\nexport const formatPercentage = percentage => {\n  if (typeof percentage === 'string') {\n    return percentage;\n  }\n  if (typeof percentage === 'number') {\n    return `${percentage.toFixed(2)}%`;\n  }\n  return '0.00%';\n};\n\n/**\r\n * Get the first available image from property data\r\n * Handles various image formats from different API responses\r\n * @param {object} property - Property object\r\n * @returns {string|null} Image URL or null\r\n */\nexport const getPropertyImage = property => {\n  var _property$images, _property$images2;\n  if (!property) return null;\n\n  // Direct image property\n  if (property.image) return property.image;\n\n  // Images object with thumbnail\n  if ((_property$images = property.images) !== null && _property$images !== void 0 && _property$images.thumbnail) return property.images.thumbnail;\n\n  // Images object with gallery array\n  if ((_property$images2 = property.images) !== null && _property$images2 !== void 0 && _property$images2.gallery && Array.isArray(property.images.gallery) && property.images.gallery.length > 0) {\n    return property.images.gallery[0];\n  }\n\n  // Direct images array\n  if (property.images && Array.isArray(property.images) && property.images.length > 0) {\n    return property.images[0];\n  }\n  return null;\n};\n\n/**\r\n * Get all available images from property data\r\n * @param {object} property - Property object\r\n * @returns {array} Array of image URLs\r\n */\nexport const getPropertyImages = property => {\n  var _property$images3;\n  if (!property) return [];\n\n  // Images object with gallery array\n  if ((_property$images3 = property.images) !== null && _property$images3 !== void 0 && _property$images3.gallery && Array.isArray(property.images.gallery)) {\n    return property.images.gallery;\n  }\n\n  // Direct images array\n  if (property.images && Array.isArray(property.images)) {\n    return property.images;\n  }\n\n  // Single image\n  const singleImage = getPropertyImage(property);\n  return singleImage ? [singleImage] : [];\n};","map":{"version":3,"names":["formatLocation","location","city","address","replace","trim","formatPrice","price","includes","num","parseFloat","isNaN","formatNumericPrice","toFixed","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatPercentage","percentage","getPropertyImage","property","_property$images","_property$images2","image","images","thumbnail","gallery","Array","isArray","length","getPropertyImages","_property$images3","singleImage"],"sources":["C:/Users/Mughal_Here/Desktop/HMR Project/frontend/src/utils/formatLocation.js"],"sourcesContent":["/**\r\n * Format location data for display\r\n * Handles both string and object formats\r\n * @param {string|object} location - Location data\r\n * @returns {string} Formatted location string\r\n */\r\nexport const formatLocation = (location) => {\r\n  if (!location) return 'Location not specified';\r\n  \r\n  if (typeof location === 'string') {\r\n    return location;\r\n  }\r\n  \r\n  if (typeof location === 'object') {\r\n    const city = location.city || '';\r\n    const address = location.address || '';\r\n    return `${city}, ${address}`.replace(/^,\\s*|,\\s*$/g, '').trim() || 'Location not specified';\r\n  }\r\n  \r\n  return 'Location not specified';\r\n};\r\n\r\n // Format prices\r\n export const formatPrice = (price) => {\r\n  // If already formatted (contains $), return as is\r\n  if (typeof price === 'string' && price.includes('$')) {\r\n    return price;\r\n  }\r\n  \r\n  // If it's a string but not formatted, try to parse it\r\n  if (typeof price === 'string') {\r\n    const num = parseFloat(price);\r\n    if (isNaN(num)) {\r\n      return 'N/A';\r\n    }\r\n    return formatNumericPrice(num);\r\n  }\r\n  \r\n  // If it's a number, format it\r\n  if (typeof price === 'number') {\r\n    return formatNumericPrice(price);\r\n  }\r\n  \r\n  return 'N/A';\r\n};\r\n\r\n// Helper function to format numeric prices\r\nconst formatNumericPrice = (num) => {\r\n  if (isNaN(num)) return 'N/A';\r\n  \r\n  if (num >= 1000000000) {\r\n    return `$${(num / 1000000000).toFixed(1)}B`;\r\n  } else if (num >= 1000000) {\r\n    return `$${(num / 1000000).toFixed(1)}M`;\r\n  } else if (num >= 1000) {\r\n    return `$${(num / 1000).toFixed(0)}K`;\r\n  }\r\n  return `$${num.toFixed(0)}`;\r\n};\r\n\r\n\r\n/**\r\n * Format currency for display\r\n * Handles both string and number formats\r\n * @param {string|number} amount - Amount to format\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (amount) => {\r\n  if (typeof amount === 'string') {\r\n    return amount; // Already formatted by backend\r\n  }\r\n  \r\n  if (typeof amount === 'number') {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n    }).format(amount);\r\n  }\r\n  \r\n  return '$0';\r\n};\r\n\r\n/**\r\n * Format percentage for display\r\n * Handles both string and number formats\r\n * @param {string|number} percentage - Percentage to format\r\n * @returns {string} Formatted percentage string\r\n */\r\nexport const formatPercentage = (percentage) => {\r\n  if (typeof percentage === 'string') {\r\n    return percentage;\r\n  }\r\n  \r\n  if (typeof percentage === 'number') {\r\n    return `${percentage.toFixed(2)}%`;\r\n  }\r\n  \r\n  return '0.00%';\r\n};\r\n\r\n/**\r\n * Get the first available image from property data\r\n * Handles various image formats from different API responses\r\n * @param {object} property - Property object\r\n * @returns {string|null} Image URL or null\r\n */\r\nexport const getPropertyImage = (property) => {\r\n  if (!property) return null;\r\n  \r\n  // Direct image property\r\n  if (property.image) return property.image;\r\n  \r\n  // Images object with thumbnail\r\n  if (property.images?.thumbnail) return property.images.thumbnail;\r\n  \r\n  // Images object with gallery array\r\n  if (property.images?.gallery && Array.isArray(property.images.gallery) && property.images.gallery.length > 0) {\r\n    return property.images.gallery[0];\r\n  }\r\n  \r\n  // Direct images array\r\n  if (property.images && Array.isArray(property.images) && property.images.length > 0) {\r\n    return property.images[0];\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n/**\r\n * Get all available images from property data\r\n * @param {object} property - Property object\r\n * @returns {array} Array of image URLs\r\n */\r\nexport const getPropertyImages = (property) => {\r\n  if (!property) return [];\r\n  \r\n  // Images object with gallery array\r\n  if (property.images?.gallery && Array.isArray(property.images.gallery)) {\r\n    return property.images.gallery;\r\n  }\r\n  \r\n  // Direct images array\r\n  if (property.images && Array.isArray(property.images)) {\r\n    return property.images;\r\n  }\r\n  \r\n  // Single image\r\n  const singleImage = getPropertyImage(property);\r\n  return singleImage ? [singleImage] : [];\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}