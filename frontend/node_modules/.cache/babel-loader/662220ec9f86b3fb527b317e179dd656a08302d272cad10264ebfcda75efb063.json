{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mughal_Here\\\\Desktop\\\\HMR Project\\\\frontend\\\\src\\\\components\\\\organization\\\\OrganizationAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { organizationsAPI } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrganizationAuthContext = /*#__PURE__*/createContext(null);\n\n// Organization credentials (will fetch actual IDs from backend)\nconst ORGANIZATION_CREDENTIALS = {\n  'hmr': {\n    email: 'admin@hmr.com',\n    password: 'hmr123',\n    organizationName: 'HMR Company',\n    organizationSlug: 'hmr'\n    // organizationId will be fetched from backend\n  },\n  'saima': {\n    email: 'admin@saima.com',\n    password: 'saima123',\n    organizationName: 'Saima Company',\n    organizationSlug: 'saima'\n    // organizationId will be fetched from backend\n  }\n};\nexport const OrganizationAuthProvider = ({\n  children\n}) => {\n  _s();\n  const [organizationUser, setOrganizationUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check if user is already logged in\n    const orgSession = localStorage.getItem('orgSession');\n    const orgUserData = localStorage.getItem('orgUser');\n    if (orgSession === 'true' && orgUserData) {\n      try {\n        const userData = JSON.parse(orgUserData);\n        setOrganizationUser(userData);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error parsing organization user data:', error);\n        localStorage.removeItem('orgSession');\n        localStorage.removeItem('orgUser');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    // Find matching organization credentials\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(([key, org]) => org.email === email && org.password === password);\n    if (!orgEntry) {\n      throw new Error('Invalid credentials');\n    }\n    const [orgKey, orgData] = orgEntry;\n    try {\n      var _response$data, _response$data$data, _response$data2;\n      // Fetch all organizations from backend\n      const response = await organizationsAPI.getAll();\n      const organizations = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$data = _response$data.data) === null || _response$data$data === void 0 ? void 0 : _response$data$data.organizations) || ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.organizations) || response.data || [];\n      console.log('📋 Fetched organizations:', organizations);\n\n      // Find matching organization by name or slug\n      const matchedOrg = organizations.find(org => {\n        const orgName = (org.name || '').toLowerCase();\n        const orgSlug = (org.slug || '').toLowerCase();\n        const searchName = orgData.organizationName.toLowerCase();\n        const searchSlug = orgData.organizationSlug.toLowerCase();\n        return orgName.includes(searchName) || orgSlug.includes(searchSlug) || searchName.includes(orgName) || searchSlug.includes(orgSlug);\n      });\n      if (!matchedOrg) {\n        console.warn('⚠️ Organization not found in backend, using default ID');\n      }\n      const organizationId = (matchedOrg === null || matchedOrg === void 0 ? void 0 : matchedOrg.id) || (matchedOrg === null || matchedOrg === void 0 ? void 0 : matchedOrg._id) || `${orgData.organizationSlug}-company`;\n      const userData = {\n        email: orgData.email,\n        organizationName: (matchedOrg === null || matchedOrg === void 0 ? void 0 : matchedOrg.name) || orgData.organizationName,\n        organizationId: organizationId,\n        organizationSlug: (matchedOrg === null || matchedOrg === void 0 ? void 0 : matchedOrg.slug) || orgData.organizationSlug,\n        role: 'organization_admin',\n        loginTime: new Date().toISOString(),\n        organizationData: matchedOrg // Store full org data\n      };\n      console.log('✅ Organization login successful:', userData);\n      setOrganizationUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('orgSession', 'true');\n      localStorage.setItem('orgUser', JSON.stringify(userData));\n      return userData;\n    } catch (error) {\n      console.error('❌ Failed to fetch organizations:', error);\n\n      // Fallback: use default IDs if backend fails\n      const fallbackOrgId = `${orgData.organizationSlug}-company`;\n      const userData = {\n        email: orgData.email,\n        organizationName: orgData.organizationName,\n        organizationId: fallbackOrgId,\n        organizationSlug: orgData.organizationSlug,\n        role: 'organization_admin',\n        loginTime: new Date().toISOString()\n      };\n      setOrganizationUser(userData);\n      setIsAuthenticated(true);\n      localStorage.setItem('orgSession', 'true');\n      localStorage.setItem('orgUser', JSON.stringify(userData));\n      return userData;\n    }\n  };\n  const logout = () => {\n    setOrganizationUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('orgSession');\n    localStorage.removeItem('orgUser');\n  };\n  return /*#__PURE__*/_jsxDEV(OrganizationAuthContext.Provider, {\n    value: {\n      organizationUser,\n      isAuthenticated,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n_s(OrganizationAuthProvider, \"cYnEyG5A+PMlHURF8s7BiT1cLn8=\");\n_c = OrganizationAuthProvider;\nexport const useOrganizationAuth = () => {\n  _s2();\n  const context = useContext(OrganizationAuthContext);\n  if (!context) {\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\n  }\n  return context;\n};\n_s2(useOrganizationAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"OrganizationAuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","organizationsAPI","jsxDEV","_jsxDEV","OrganizationAuthContext","ORGANIZATION_CREDENTIALS","email","password","organizationName","organizationSlug","OrganizationAuthProvider","children","_s","organizationUser","setOrganizationUser","isAuthenticated","setIsAuthenticated","loading","setLoading","orgSession","localStorage","getItem","orgUserData","userData","JSON","parse","error","console","removeItem","login","orgEntry","Object","entries","find","key","org","Error","orgKey","orgData","_response$data","_response$data$data","_response$data2","response","getAll","organizations","data","log","matchedOrg","orgName","name","toLowerCase","orgSlug","slug","searchName","searchSlug","includes","warn","organizationId","id","_id","role","loginTime","Date","toISOString","organizationData","setItem","stringify","fallbackOrgId","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useOrganizationAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/Mughal_Here/Desktop/HMR Project/frontend/src/components/organization/OrganizationAuth.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { organizationsAPI } from '../../services/api';\r\n\r\nconst OrganizationAuthContext = createContext(null);\r\n\r\n// Organization credentials (will fetch actual IDs from backend)\r\nconst ORGANIZATION_CREDENTIALS = {\r\n  'hmr': {\r\n    email: 'admin@hmr.com',\r\n    password: 'hmr123',\r\n    organizationName: 'HMR Company',\r\n    organizationSlug: 'hmr',\r\n    // organizationId will be fetched from backend\r\n  },\r\n  'saima': {\r\n    email: 'admin@saima.com',\r\n    password: 'saima123',\r\n    organizationName: 'Saima Company',\r\n    organizationSlug: 'saima',\r\n    // organizationId will be fetched from backend\r\n  }\r\n};\r\n\r\nexport const OrganizationAuthProvider = ({ children }) => {\r\n  const [organizationUser, setOrganizationUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const orgSession = localStorage.getItem('orgSession');\r\n    const orgUserData = localStorage.getItem('orgUser');\r\n    \r\n    if (orgSession === 'true' && orgUserData) {\r\n      try {\r\n        const userData = JSON.parse(orgUserData);\r\n        setOrganizationUser(userData);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing organization user data:', error);\r\n        localStorage.removeItem('orgSession');\r\n        localStorage.removeItem('orgUser');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    // Find matching organization credentials\r\n    const orgEntry = Object.entries(ORGANIZATION_CREDENTIALS).find(\r\n      ([key, org]) => org.email === email && org.password === password\r\n    );\r\n\r\n    if (!orgEntry) {\r\n      throw new Error('Invalid credentials');\r\n    }\r\n\r\n    const [orgKey, orgData] = orgEntry;\r\n\r\n    try {\r\n      // Fetch all organizations from backend\r\n      const response = await organizationsAPI.getAll();\r\n      const organizations = response.data?.data?.organizations || response.data?.organizations || response.data || [];\r\n      \r\n      console.log('📋 Fetched organizations:', organizations);\r\n\r\n      // Find matching organization by name or slug\r\n      const matchedOrg = organizations.find(org => {\r\n        const orgName = (org.name || '').toLowerCase();\r\n        const orgSlug = (org.slug || '').toLowerCase();\r\n        const searchName = orgData.organizationName.toLowerCase();\r\n        const searchSlug = orgData.organizationSlug.toLowerCase();\r\n        \r\n        return orgName.includes(searchName) || \r\n               orgSlug.includes(searchSlug) ||\r\n               searchName.includes(orgName) ||\r\n               searchSlug.includes(orgSlug);\r\n      });\r\n\r\n      if (!matchedOrg) {\r\n        console.warn('⚠️ Organization not found in backend, using default ID');\r\n      }\r\n\r\n      const organizationId = matchedOrg?.id || matchedOrg?._id || `${orgData.organizationSlug}-company`;\r\n\r\n      const userData = {\r\n        email: orgData.email,\r\n        organizationName: matchedOrg?.name || orgData.organizationName,\r\n        organizationId: organizationId,\r\n        organizationSlug: matchedOrg?.slug || orgData.organizationSlug,\r\n        role: 'organization_admin',\r\n        loginTime: new Date().toISOString(),\r\n        organizationData: matchedOrg // Store full org data\r\n      };\r\n\r\n      console.log('✅ Organization login successful:', userData);\r\n\r\n      setOrganizationUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('orgSession', 'true');\r\n      localStorage.setItem('orgUser', JSON.stringify(userData));\r\n\r\n      return userData;\r\n    } catch (error) {\r\n      console.error('❌ Failed to fetch organizations:', error);\r\n      \r\n      // Fallback: use default IDs if backend fails\r\n      const fallbackOrgId = `${orgData.organizationSlug}-company`;\r\n      const userData = {\r\n        email: orgData.email,\r\n        organizationName: orgData.organizationName,\r\n        organizationId: fallbackOrgId,\r\n        organizationSlug: orgData.organizationSlug,\r\n        role: 'organization_admin',\r\n        loginTime: new Date().toISOString()\r\n      };\r\n\r\n      setOrganizationUser(userData);\r\n      setIsAuthenticated(true);\r\n      localStorage.setItem('orgSession', 'true');\r\n      localStorage.setItem('orgUser', JSON.stringify(userData));\r\n\r\n      return userData;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setOrganizationUser(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('orgSession');\r\n    localStorage.removeItem('orgUser');\r\n  };\r\n\r\n  return (\r\n    <OrganizationAuthContext.Provider \r\n      value={{ \r\n        organizationUser, \r\n        isAuthenticated, \r\n        loading, \r\n        login, \r\n        logout \r\n      }}\r\n    >\r\n      {children}\r\n    </OrganizationAuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useOrganizationAuth = () => {\r\n  const context = useContext(OrganizationAuthContext);\r\n  if (!context) {\r\n    throw new Error('useOrganizationAuth must be used within OrganizationAuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}